name: Rust

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
  
    strategy:
      matrix:
        system: [darwin, windows]
        arch: [i686, x86_64]
        include:
          - system: windows
            os: windows-latest
            vendor: pc
            abi: -msvc
            rustflags: -C target-feature=+crt-static
            archive_type: zip
            archive_extension: .zip
          - system: darwin
            os: macos-latest
            vendor: apple
            abi: ""
            rustflags: -C target-feature=+crt-static
            archive_type: tar
            archive_extension: .tar.gz
        exclude:
          - system: darwin
            arch: i686

    runs-on: ${{ matrix.os }}
    
    env:
      CARGO_BUILD_TARGET: ${{matrix.arch}}-${{matrix.vendor}}-${{matrix.system}}${{matrix.abi}}
      RUSTFLAGS: ${{matrix.rustflags}}

    steps:
    - uses: actions/checkout@v2
    - name: Build
      id: build
      run: |
        cargo build --release --verbose
        echo "::set-output name=artifact_dir::target/${{matrix.arch}}-${{matrix.vendor}}-${{matrix.system}}${{matrix.abi}}/release"
        echo "::set-output name=artifact_name::${{matrix.arch}}-${{matrix.vendor}}-${{matrix.system}}${{matrix.abi}}"
    - name: Tests
      run: cargo test --verbose
    - name: Verify Artifact (windows)
      if: ${{matrix.system == 'windows'}}
      run: dir ${{steps.build.outputs.artifact_dir}}
    - name: Verify Artifact (macos)
      if: ${{matrix.system == 'darwin'}}
      run: ls -l ${{steps.build.outputs.artifact_dir}}
    - name: Compress Artifact
      uses: thedoctor0/zip-release@master
      with:
        type: ${{matrix.archive_type}}
        directory: ${{steps.build.outputs.artifact_dir}}
        filename: ${{steps.build.outputs.artifact_name}}${{matrix.archive_extension}}
        path: 'scanner-cmd*'
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{steps.build.outputs.artifact_name}}
        path: ${{steps.build.outputs.artifact_dir}}/${{steps.build.outputs.artifact_name}}${{matrix.archive_extension}}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ~/artifacts
      - name: Publish Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ~/artifacts/**/*.zip,~/artifacts/**/*.tar.gz
          allowUpdates: true
          generateReleaseNotes: true
          replacesArtifacts: true
          removeArtifacts: true
          prerelease: false
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}